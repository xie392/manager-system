<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAACn4GkUq+htoKPkagCj5GoAo+RqAKPkagCj5GoAo+RqAKPkagCj5
        GoAo+RqAKPkagCj5GoAo+RqAKPkagCj5GoAo+RqAKPkagCj5GoAo+RqAKPobYCj5HC0AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAo+RqAKfoa/yn6Gv8p+hr/Kfoa/yn6Gv8p+hr/Kfoa/yn6
        Gv8p+hr/Kfoa/yn6Gv8p+hr/Kfoa/yn6Gv8p+hr/Kfoa/yn6Gv8p+hr/Kfoa/yn6Gv8p+hr/Kfoa/yr5
        G1UAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKvobmSn6Gv8p+hr/Kfoa/yn6Gb8p+hm/KfoZvyn6
        Gb8p+hm/KfoZvyn6Gb8p+hm/KfoZvyn6Gb8p+hm/KfoZvyn6Gb8p+hm/KfoZvyn6Gb8p+hm/KfoZvyn6
        Gv8p+hr/Kfoa/yn6GV0AAAAAAAAAAAAAAAAAAAAAAAAAACf/FA0p+hr/Kfoa/yr7GrIo9xggAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAKPcYQCn7Gucp+hr/KfoawwAAAAAAAAAAAAAAAAAAAAAAAAAAJvkaKCn6Gv8p+hr/KPwbTAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAKvsahyn6Gv8p+RrkAAAAAAAAAAAAAAAAAAAAAAAAAAAo9xhAKfoa/yn6
        Gv8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAo9xhAKfoa/yn6Gv8AAAAAAAAAAAAAAAAAAAAAAAAAACj3
        GEAp+hr/Kfoa/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACj3GEAp+hr/Kfoa/wAAAAAAAAAAAAAAAAAA
        AAAAAAAAKPcYQCn6Gv8p+hr/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJP8SDin6
        GtQq+hqfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKPcYQCn6Gv8p+hr/AAAAAAAA
        AAAAAAAAAAAAAAAAAAAo9xhAKfoa/yn6Gv8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAo9xhAKfoa/yn6Gv8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAo9xhAKfoa/yn6
        Gv8AAAAAAAAAAAAAAAAAAAAAAAAAACj3GEAp+hr/Kfoa/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAACj3GEAp+hr/Kfoa/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACj3
        GEAp+hr/Kfoa/wAAAAAAAAAAAAAAAAAAAAAAAAAAKPcYQCn6Gv8p+hr/AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAKPcYQCn6Gv8p+hr/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAKPcYQCn6Gv8p+hr/AAAAAAAAAAAAAAAAAAAAAAAAAAAo9xhAKfoa/yn6Gv8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAo9xhAKfoa/yn6Gv8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAo9xhAKfoa/yn6Gv8AAAAAAAAAAAAAAAAAAAAAAAAAACj3GEAp+hr/Kfoa/wAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACj3GEAp+hr/Kfoa/wAAAAAAAAAAAAAAAAAA
        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
        +P//D/D//4fh//+Bg///wAf///AP///4H/8=
</value>
  </data>
</root>